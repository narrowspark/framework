#!/usr/bin/env php
<?php

require __DIR__ . '/vendor/symfony/filesystem/Exception/ExceptionInterface.php';

require __DIR__ . '/vendor/symfony/filesystem/Exception/IOExceptionInterface.php';

require __DIR__ . '/vendor/symfony/filesystem/Exception/IOException.php';

require __DIR__ . '/vendor/symfony/filesystem/Filesystem.php';

use Symfony\Component\Filesystem\Filesystem;

$copy = false !== $k = \array_search('--copy', $argv, true);
$copy && \array_splice($argv, $k, 1);
$pathToProject = $argv[1] ?? \getcwd();

if ($argc !== 2) {
    echo 'Link or Copy dependencies to components to a local clone of the main symfony/symfony GitHub repository.'.PHP_EOL.PHP_EOL;
    echo "Usage: ${argv[0]} /path/to/the/project".PHP_EOL;
    echo '       Use `--copy` to copy dependencies instead of symlink'.PHP_EOL.PHP_EOL;
    echo "The directory [${pathToProject}] does not exist or the dependencies are not installed, did you forget to run [composer install] in your project?".PHP_EOL;

    exit(1);
}

$narrowsparkPackages = ['narrowspark/framework' => __DIR__];

$filesystem  = new Filesystem();
$braces      = ['Bridge', 'Component', 'Provider', 'Contract'];

$directories = \array_merge(...\array_values(\array_map(static function ($part) {
    return \glob(__DIR__ . '/src/Viserio/' . $part . '/*', \GLOB_ONLYDIR | \GLOB_NOSORT);
}, $braces)));

$directories[] = __DIR__.'/src/Viserio/Contract';

foreach ($directories as $dir) {
    if ($filesystem->exists($composer = "${dir}/composer.json")) {
        $narrowsparkPackages[\json_decode(\file_get_contents($composer), false)->name] = $dir;
    }
}

foreach (\glob("${pathToProject}/vendor/viserio/*", \GLOB_ONLYDIR | \GLOB_NOSORT) as $dir) {
    $package = 'viserio/' . \basename($dir);

    if (!$copy && \is_link($dir)) {
        echo "[${package}] is already a symlink, skipping." . \PHP_EOL;

        continue;
    }

    if (! isset($narrowsparkPackages[$package])) {
        continue;
    }

    $narrowsparkDir = (DIRECTORY_SEPARATOR === '\\' || $copy) ? $narrowsparkPackages[$package] : $filesystem->makePathRelative($narrowsparkPackages[$package], \dirname(\realpath($dir)));

    $filesystem->remove($dir);

    if ($copy) {
        $filesystem->mirror($narrowsparkDir, $dir);
        echo "[${package}] has been copied from [${narrowsparkPackages[$package]}]\".".PHP_EOL;
    } else {
        $filesystem->symlink($narrowsparkDir, $dir);
        echo "[${package}] has been linked to [${narrowsparkPackages[$package]}]\".".PHP_EOL;
    }
}

foreach (\glob("${pathToProject}/storage/framework/*", \GLOB_NOSORT) as $cacheDir) {
    $filesystem->remove($cacheDir);
}
