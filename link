#!/usr/bin/env php
<?php

require __DIR__ . '/vendor/symfony/filesystem/Exception/ExceptionInterface.php';

require __DIR__ . '/vendor/symfony/filesystem/Exception/IOExceptionInterface.php';

require __DIR__ . '/vendor/symfony/filesystem/Exception/IOException.php';

require __DIR__ . '/vendor/symfony/filesystem/Filesystem.php';

use Symfony\Component\Filesystem\Filesystem;

if ($argc !== 2) {
    echo 'Link dependencies to components to a local clone of the main narrowspark/framework GitHub repository.' . \PHP_EOL . \PHP_EOL;
    echo "Usage: {$argv[0]} /path/to/the/project" . \PHP_EOL;

    exit(1);
}

if (! \is_dir("{$argv[1]}/vendor/viserio")) {
    echo "The directory \"{$argv[1]}\" does not exist or the dependencies are not installed, did you forget to run \"composer install\" in your project?" . \PHP_EOL;

    exit(1);
}

$sfPackages = ['narrowspark/framework' => __DIR__];

$filesystem  = new Filesystem();
$braces      = ['Bridge', 'Component', 'Provider', 'Contract'];

$directories = \array_merge(...\array_values(\array_map(static function ($part) {
    return \glob(__DIR__ . '/src/Viserio/' . $part . '/*', \GLOB_ONLYDIR | \GLOB_NOSORT);
}, $braces)));

$directories[] = __DIR__.'/src/Viserio/Contract';

foreach ($directories as $dir) {
    if ($filesystem->exists($composer = "${dir}/composer.json")) {
        $sfPackages[\json_decode(\file_get_contents($composer), false)->name] = $dir;
    }
}

foreach (\glob("{$argv[1]}/vendor/viserio/*", \GLOB_ONLYDIR | \GLOB_NOSORT) as $dir) {
    $package = 'viserio/' . \basename($dir);

    if (\is_link($dir)) {
        echo "\"${package}\" is already a symlink, skipping." . \PHP_EOL;

        continue;
    }

    if (! isset($sfPackages[$package])) {
        continue;
    }

    $sfDir = '\\' === \DIRECTORY_SEPARATOR ? $sfPackages[$package] : $filesystem->makePathRelative($sfPackages[$package], \dirname(\realpath($dir)));

    $filesystem->remove($dir);
    $filesystem->symlink($sfDir, $dir);

    echo "\"${package}\" has been linked to \"{$sfPackages[$package]}\"." . \PHP_EOL;
}

foreach (\glob("{$argv[1]}/storage/framework/*", \GLOB_NOSORT) as $cacheDir) {
    $filesystem->remove($cacheDir);
}
