<?php

declare(strict_types=1);

/**
 * This file is part of Narrowspark Framework.
 *
 * (c) Daniel Bannert <d.bannert@anolilab.de>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Viserio\Component\Console\Tests\Container\Provider\Compiled;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class ConsoleServiceProviderContainer extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
     * Create a new Compiled Container instance.
     */
    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMapping = [
            \Viserio\Component\Console\Application::class => 'get206058a713a7172158e11c9d996f6a067c294ab0356ae6697060f162e057445a',
            \Viserio\Contract\Events\EventManager::class => 'getd89597e6b0951303b9c81d9663646ce16e63e5d0cf7daeed45f04779b8a60c3b',
        ];
        $this->aliases = [
            \Symfony\Component\Console\Application::class => \Viserio\Component\Console\Application::class,
            \Viserio\Component\Events\EventManager::class => \Viserio\Contract\Events\EventManager::class,
            'cerebro' => \Viserio\Component\Console\Application::class,
            'console' => \Viserio\Component\Console\Application::class,
            'events' => \Viserio\Contract\Events\EventManager::class,
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return [
            \Psr\Container\ContainerInterface::class => true,
            \Viserio\Contract\Container\Factory::class => true,
            \Viserio\Contract\Container\TaggedContainer::class => true,
            'container' => true,
        ];
    }

    /**
     * Returns the public Viserio\Component\Console\Application shared service.
     *
     * @return \Viserio\Component\Console\Application
     */
    protected function get206058a713a7172158e11c9d996f6a067c294ab0356ae6697060f162e057445a(): \Viserio\Component\Console\Application
    {
        $this->services[\Viserio\Component\Console\Application::class] = $instance = new \Viserio\Component\Console\Application();

        $instance->setContainer($this);

        if ($this->has(\Viserio\Contract\Events\EventManager::class)) {
            $instance->setEventManager(($this->services[\Viserio\Contract\Events\EventManager::class] ?? $this->getd89597e6b0951303b9c81d9663646ce16e63e5d0cf7daeed45f04779b8a60c3b()));
        }

        return $instance;
    }

    /**
     * Returns the public Viserio\Contract\Events\EventManager shared service.
     *
     * @return \Viserio\Component\Events\EventManager
     */
    protected function getd89597e6b0951303b9c81d9663646ce16e63e5d0cf7daeed45f04779b8a60c3b(): \Viserio\Component\Events\EventManager
    {
        return $this->services[\Viserio\Contract\Events\EventManager::class] = new \Viserio\Component\Events\EventManager();
    }
}
