<?php

declare(strict_types=1);

namespace Viserio\Component\Cron\Tests\Container\Provider\Compiled;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class CronServiceProviderContainer extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
     * Create a new Compiled Container instance.
     */
    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->parameters = [
            'viserio' => [
                'console' => [
                    'name' => 'test',
                    'version' => '1',
                ],
                'cron' => [
                    'env' => 'test',
                    'console' => 'cerebro',
                    'path' => '/var/www/framework/src/Viserio/Component/Cron/Tests/Container',
                ],
            ],
            'console.command.ids' => [],
        ];
        $this->methodMapping = [
            \Symfony\Component\Console\CommandLoader\CommandLoaderInterface::class => 'getce817e8bdc75399a693ba45b876c457a0f7fd422258f7d4eabc553987c2fbd31',
            \Viserio\Component\Config\Command\ConfigDumpCommand::class => 'get88001f5d55ce57598db2e5b80611a49d605be7b037e634e18ca2493683a114ee',
            \Viserio\Component\Config\Command\ConfigReaderCommand::class => 'get91fd613885c83bb4b00b29ee3e879446444b7ecad7fdd0292ef1df30bdfa3884',
            \Viserio\Component\Console\Application::class => 'get206058a713a7172158e11c9d996f6a067c294ab0356ae6697060f162e057445a',
            \Viserio\Component\Cron\Command\CronListCommand::class => 'get87b164346432352f4ee3e34b1f25c4c1c674833a5bc6a84bc08c6a0f38a7f2fc',
            \Viserio\Component\Cron\Command\ScheduleRunCommand::class => 'getfad3fe2b13bcec06db5de00d5628b79d397c81d4135d8b09f1326c0368b5b805',
            \Viserio\Contract\Cron\Schedule::class => 'get3246b105a9ad528f2d36600a4c377f14d16d2af3372dd5fffa5558ae9a807a62',
        ];
        $this->aliases = [
            \Symfony\Component\Console\Application::class => \Viserio\Component\Console\Application::class,
            \Viserio\Component\Cron\Schedule::class => \Viserio\Contract\Cron\Schedule::class,
            'cerebro' => \Viserio\Component\Console\Application::class,
            'console' => \Viserio\Component\Console\Application::class,
        ];
    }

    /**
     * Returns the public Symfony\Component\Console\CommandLoader\CommandLoaderInterface shared service.
     *
     * @return \Viserio\Component\Console\CommandLoader\IteratorCommandLoader
     */
    protected function getce817e8bdc75399a693ba45b876c457a0f7fd422258f7d4eabc553987c2fbd31(): \Viserio\Component\Console\CommandLoader\IteratorCommandLoader
    {
        return $this->services[\Symfony\Component\Console\CommandLoader\CommandLoaderInterface::class] = new \Viserio\Component\Console\CommandLoader\IteratorCommandLoader(new \Viserio\Component\Container\RewindableGenerator(function () {
            yield 'cron:list' => ($this->services[\Viserio\Component\Cron\Command\CronListCommand::class] ?? $this->get87b164346432352f4ee3e34b1f25c4c1c674833a5bc6a84bc08c6a0f38a7f2fc());
            yield 'cron:run' => ($this->services[\Viserio\Component\Cron\Command\ScheduleRunCommand::class] ?? $this->getfad3fe2b13bcec06db5de00d5628b79d397c81d4135d8b09f1326c0368b5b805());
            yield 'option:dump' => ($this->services[\Viserio\Component\Config\Command\ConfigDumpCommand::class] ?? $this->get88001f5d55ce57598db2e5b80611a49d605be7b037e634e18ca2493683a114ee());
            yield 'option:read' => ($this->services[\Viserio\Component\Config\Command\ConfigReaderCommand::class] ?? $this->get91fd613885c83bb4b00b29ee3e879446444b7ecad7fdd0292ef1df30bdfa3884());
        }, 4));
    }

    /**
     * Returns the public Viserio\Component\Config\Command\ConfigDumpCommand shared service.
     *
     * @return \Viserio\Component\Config\Command\ConfigDumpCommand
     */
    protected function get88001f5d55ce57598db2e5b80611a49d605be7b037e634e18ca2493683a114ee(): \Viserio\Component\Config\Command\ConfigDumpCommand
    {
        $this->services[\Viserio\Component\Config\Command\ConfigDumpCommand::class] = $instance = new \Viserio\Component\Config\Command\ConfigDumpCommand();

        $instance->setName('option:dump');

        return $instance;
    }

    /**
     * Returns the public Viserio\Component\Config\Command\ConfigReaderCommand shared service.
     *
     * @return \Viserio\Component\Config\Command\ConfigReaderCommand
     */
    protected function get91fd613885c83bb4b00b29ee3e879446444b7ecad7fdd0292ef1df30bdfa3884(): \Viserio\Component\Config\Command\ConfigReaderCommand
    {
        $this->services[\Viserio\Component\Config\Command\ConfigReaderCommand::class] = $instance = new \Viserio\Component\Config\Command\ConfigReaderCommand();

        $instance->setName('option:read');

        return $instance;
    }

    /**
     * Returns the public Viserio\Component\Console\Application shared service.
     *
     * @return \Viserio\Component\Console\Application
     */
    protected function get206058a713a7172158e11c9d996f6a067c294ab0356ae6697060f162e057445a(): \Viserio\Component\Console\Application
    {
        $this->services[\Viserio\Component\Console\Application::class] = $instance = new \Viserio\Component\Console\Application($this->getParameter('viserio.console.version'), $this->getParameter('viserio.console.name'));

        $instance->setContainer($this);
        if ($this->has(\Symfony\Component\Console\CommandLoader\CommandLoaderInterface::class)) {
            $instance->setCommandLoader(($this->services[\Symfony\Component\Console\CommandLoader\CommandLoaderInterface::class] ?? $this->getce817e8bdc75399a693ba45b876c457a0f7fd422258f7d4eabc553987c2fbd31()));
        }

        return $instance;
    }

    /**
     * Returns the public Viserio\Component\Cron\Command\CronListCommand shared service.
     *
     * @return \Viserio\Component\Cron\Command\CronListCommand
     */
    protected function get87b164346432352f4ee3e34b1f25c4c1c674833a5bc6a84bc08c6a0f38a7f2fc(): \Viserio\Component\Cron\Command\CronListCommand
    {
        $this->services[\Viserio\Component\Cron\Command\CronListCommand::class] = $instance = new \Viserio\Component\Cron\Command\CronListCommand();

        $instance->setName('cron:list');

        return $instance;
    }

    /**
     * Returns the public Viserio\Component\Cron\Command\ScheduleRunCommand shared service.
     *
     * @return \Viserio\Component\Cron\Command\ScheduleRunCommand
     */
    protected function getfad3fe2b13bcec06db5de00d5628b79d397c81d4135d8b09f1326c0368b5b805(): \Viserio\Component\Cron\Command\ScheduleRunCommand
    {
        $this->services[\Viserio\Component\Cron\Command\ScheduleRunCommand::class] = $instance = new \Viserio\Component\Cron\Command\ScheduleRunCommand($this->getParameter('viserio.cron.env'), false);

        $instance->setName('cron:run');

        return $instance;
    }

    /**
     * Returns the public Viserio\Contract\Cron\Schedule shared service.
     *
     * @return \Viserio\Component\Cron\Schedule
     */
    protected function get3246b105a9ad528f2d36600a4c377f14d16d2af3372dd5fffa5558ae9a807a62(): \Viserio\Component\Cron\Schedule
    {
        $this->services[\Viserio\Contract\Cron\Schedule::class] = $instance = new \Viserio\Component\Cron\Schedule($this->getParameter('viserio.cron.path'), null);

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return [
            \Psr\Container\ContainerInterface::class => true,
            \Viserio\Contract\Container\CompiledContainer::class => true,
            \Viserio\Contract\Container\Factory::class => true,
            \Viserio\Contract\Container\TaggedContainer::class => true,
            'container' => true,
        ];
    }
}
