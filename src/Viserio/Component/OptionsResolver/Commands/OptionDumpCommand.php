<?php
declare(strict_types=1);
namespace Viserio\Component\OptionsResolver\Commands;

use ReflectionClass;
use Viserio\Component\Console\Command\Command;
use Viserio\Component\Contracts\OptionsResolver\ProvidesDefaultOptions as ProvidesDefaultOptionsContract;
use Viserio\Component\Contracts\OptionsResolver\RequiresComponentConfig as RequiresComponentConfigContract;
use Viserio\Component\Contracts\OptionsResolver\RequiresConfig as RequiresConfigContract;
use Viserio\Component\Contracts\OptionsResolver\RequiresMandatoryOptions as RequiresMandatoryOptionsContract;

class OptionDumpCommand extends Command
{
    private const CONFIG_TEMPLATE = <<<EOC
<?php
declare(strict_types=1);
/**
 * This file is generated by \Viserio\Component\OptionsResolver\Commands\OptionDumpCommand.
 */
EOC;

    /**
     * {@inheritdoc}
     */
    protected $name = 'option:dump';

    /**
     * {@inheritdoc}
     */
    protected $description = 'Dumps config files for found classes with RequiresConfig interface.';

    /**
     * {@inheritdoc}
     */
    public function handle()
    {
        $configs = [];

        foreach (get_declared_classes() as $className) {
            $reflectionClass = new ReflectionClass($className);
            $interfaces      = $reflectionClass->getInterfaceNames();

            if (! $reflectionClass->isInternal() && ! $reflectionClass->isAbstract() && in_array(RequiresConfigContract::class, $interfaces, true)) {
                $factory          = $reflectionClass->newInstanceWithoutConstructor();
                $dimensions       = [];
                $mandatoryOptions = [];
                $defaultOptions   = [];

                if (in_array(RequiresComponentConfigContract::class, $interfaces, true)) {
                    $dimensions = (array) $factory->getDimensions();
                }

                if (in_array(ProvidesDefaultOptionsContract::class, $interfaces, true)) {
                    $defaultOptions = (array) $factory->getDefaultOptions();
                }

                if (in_array(RequiresMandatoryOptionsContract::class, $interfaces, true)) {
                    $mandatoryOptions = (array) $factory->getMandatoryOptions();
                }

                $lastKey = end($dimensions);
                $config  = $this->buildMultidimensionalArray($dimensions);

                $config[$lastKey]  = $defaultOptions;

                $configs[$lastKey] = $config;
            }
        }
    }

    private function buildMultidimensionalArray(array $dimensions)
    {
        $config = [];
        $index  = array_shift($dimensions);

        if (! isset($dimensions[0])) {
            $config[$index] = [];
        } else {
            $config[$index] = $this->buildMultidimensionalArray($dimensions);
        }

        return $config;
    }
}
