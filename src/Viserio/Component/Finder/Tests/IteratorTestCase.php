<?php

declare(strict_types=1);

/**
 * This file is part of Narrowspark Framework.
 *
 * (c) Daniel Bannert <d.bannert@anolilab.de>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Viserio\Component\Finder\Tests;

use PHPUnit\Framework\TestCase;
use SplFileInfo;
use Traversable;

/**
 * @internal
 */
abstract class IteratorTestCase extends TestCase
{
    /**
     * @param array        $expected
     * @param \Traversable $iterator
     *
     * @return void
     */
    protected function assertIterator(array $expected, Traversable $iterator): void
    {
        // set iterator_to_array $use_key to false to avoid values merge
        // this made FinderTest::testAppendWithAnArray() fail with GnuFinderAdapter
        $values = \array_map(static function (SplFileInfo $fileinfo) {
            return \str_replace('/', \DIRECTORY_SEPARATOR, $fileinfo->getPathname());
        }, \iterator_to_array($iterator, false));

        $expected = \array_map(static function ($path) {
            return \str_replace('/', \DIRECTORY_SEPARATOR, $path);
        }, $expected);

        \sort($values);
        \sort($expected);

        self::assertEquals($expected, \array_values($values));
    }

    protected function assertOrderedIterator($expected, Traversable $iterator): void
    {
        $values = \array_map(static function (SplFileInfo $fileinfo) {
            return $fileinfo->getPathname();
        }, \iterator_to_array($iterator));

        self::assertEquals($expected, \array_values($values));
    }

    /**
     *  Same as assertOrderedIterator, but checks the order of groups of
     *  array elements.
     *
     *  @param array $expected - an array of arrays. For any two subarrays
     *      $a and $b such that $a goes before $b in $expected, the method
     *      asserts that any element of $a goes before any element of $b
     *      in the sequence generated by $iterator
     * @param Traversable $iterator
     */
    protected function assertOrderedIteratorForGroups(array $expected, Traversable $iterator): void
    {
        $values = \array_values(\array_map(static function (SplFileInfo $fileinfo) {
            return $fileinfo->getPathname();
        }, \iterator_to_array($iterator)));

        foreach ($expected as $subarray) {
            $temp = [];

            while (\count($values) && \count($temp) < \count($subarray)) {
                $temp[] = \array_shift($values);
            }

            \sort($temp);
            \sort($subarray);

            self::assertEquals($subarray, $temp);
        }
    }

    /**
     * Same as IteratorTestCase::assertIterator with foreach usage.
     *
     * @param array                    $expected
     * @param Traversable<SplFileInfo> $iterator
     */
    protected function assertIteratorInForeach(array $expected, Traversable $iterator): void
    {
        $values = [];

        /** @var SplFileInfo $file */
        foreach ($iterator as $file) {
            self::assertInstanceOf(SplFileInfo::class, $file);

            $values[] = $file->getPathname();
        }

        \sort($values);
        \sort($expected);

        self::assertEquals($expected, \array_values($values));
    }

    /**
     * Same as IteratorTestCase::assertOrderedIterator with foreach usage.
     *
     * @param array                    $expected
     * @param Traversable<SplFileInfo> $iterator
     */
    protected function assertOrderedIteratorInForeach(array $expected, Traversable $iterator): void
    {
        $values = [];

        /** @var SplFileInfo $file */
        foreach ($iterator as $file) {
            self::assertInstanceOf(SplFileInfo::class, $file);

            $values[] = $file->getPathname();
        }

        self::assertEquals($expected, \array_values($values));
    }
}
