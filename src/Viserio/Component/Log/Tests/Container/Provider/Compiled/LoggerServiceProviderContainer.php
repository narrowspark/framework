<?php

declare(strict_types=1);

/**
 * This file is part of Narrowspark Framework.
 *
 * (c) Daniel Bannert <d.bannert@anolilab.de>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Viserio\Component\Log\Tests\Provider\Compiled;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class LoggerServiceProviderContainer extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
     * Create a new Compiled Container instance.
     */
    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMapping = [
            \Psr\Log\LoggerInterface::class => 'get7b41cd3c0d8842e9337c4046b9fdcc1a2972a75ad8af646b65f2ee2d3f1daba0',
            \Viserio\Contract\Events\EventManager::class => 'getd89597e6b0951303b9c81d9663646ce16e63e5d0cf7daeed45f04779b8a60c3b',
            \Viserio\Component\Log\LogManager::class => 'getafab5c05bf2396b9796ebb692ff953a79f0a908d696ed0ac4d3e3657b06421c1',
            'config' => 'get34bcaa5afa8745d92e6161e8495be3b939c5c6abb4dc2fd1f5a3cfdaba620256',
        ];
        $this->aliases = [
            \Viserio\Component\Events\EventManager::class => \Viserio\Contract\Events\EventManager::class,
            'events' => \Viserio\Contract\Events\EventManager::class,
            'log' => \Viserio\Component\Log\LogManager::class,
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return [
            \Psr\Container\ContainerInterface::class => true,
            \Viserio\Contract\Container\Factory::class => true,
            \Viserio\Contract\Container\TaggedContainer::class => true,
            'container' => true,
        ];
    }

    /**
     * Returns the public Psr\Log\LoggerInterface shared service.
     *
     * @return mixed An instance returned by \Viserio\Component\Container\Definition\ReferenceDefinition::getDriver()
     */
    protected function get7b41cd3c0d8842e9337c4046b9fdcc1a2972a75ad8af646b65f2ee2d3f1daba0()
    {
        return $this->services[\Psr\Log\LoggerInterface::class] = ($this->services[\Viserio\Component\Log\LogManager::class] ?? $this->getafab5c05bf2396b9796ebb692ff953a79f0a908d696ed0ac4d3e3657b06421c1())->getDriver();
    }

    /**
     * Returns the public Viserio\Contract\Events\EventManager shared service.
     *
     * @return \Viserio\Component\Events\EventManager
     */
    protected function getd89597e6b0951303b9c81d9663646ce16e63e5d0cf7daeed45f04779b8a60c3b(): \Viserio\Component\Events\EventManager
    {
        return $this->services[\Viserio\Contract\Events\EventManager::class] = new \Viserio\Component\Events\EventManager();
    }

    /**
     * Returns the public Viserio\Component\Log\LogManager shared service.
     *
     * @return \Viserio\Component\Log\LogManager
     */
    protected function getafab5c05bf2396b9796ebb692ff953a79f0a908d696ed0ac4d3e3657b06421c1(): \Viserio\Component\Log\LogManager
    {
        $this->services[\Viserio\Component\Log\LogManager::class] = $instance = new \Viserio\Component\Log\LogManager([
            'viserio' => [
                'logging' => [
                    'path' => '',
                    'env' => 'local',
                    'name' => '',
                ],
            ],
        ]);

        if (isset($this->services[\Viserio\Contract\Events\EventManager::class])) {
            $instance->setEventManager(($this->services[\Viserio\Contract\Events\EventManager::class] ?? null));
        }

        return $instance;
    }

    /**
     * Returns the public config service.
     *
     * @return array
     */
    protected function get34bcaa5afa8745d92e6161e8495be3b939c5c6abb4dc2fd1f5a3cfdaba620256(): array
    {
        return [
            'viserio' => [
                'logging' => [
                    'path' => '',
                    'env' => 'local',
                    'name' => '',
                ],
            ],
        ];
    }
}
