<?php

declare(strict_types=1);

/**
 * This file is part of Narrowspark Framework.
 *
 * (c) Daniel Bannert <d.bannert@anolilab.de>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Container357b7101a416c18e5a4588e2afb3aaf32c2c7614bdf52f79057f621d2fb795b0;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class FilesystemServiceProviderContainer extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
     * List of target dirs.
     *
     * @var array
     */
    private $targetDirs = [];

    /**
     * Path to the container dir.
     *
     * @var string
     */
    private $containerDir;

    /**
     * Create a new Compiled Container instance.
     *
     * @param array  $buildParameters
     * @param string $containerDir
     *
     * @var string $containerDir
     */
    public function __construct(array $buildParameters = [], string $containerDir = __DIR__)
    {
        $this->services = $this->privates = [];
        $dir = $this->targetDirs[0] = \dirname($containerDir);

        for ($i = 1; $i <= 5; $i++) {
            $this->targetDirs[$i] = $dir = \dirname($dir);
        }

        $this->containerDir = $containerDir;
        $this->parameters = \array_merge([
            'container.dumper.inline_factories' => true,
            'container.dumper.inline_class_loader' => false,
        ], $buildParameters);
        $this->methodMapping = [
            \Psr\Cache\CacheItemPoolInterface::class => 'geta5b685927e5b9bb2231acfb11f144d6dad3923af3df18927d2541a017feb40a3',
            \Viserio\Contract\Cache\Manager::class => 'get4edf51c380c969168368957bf52a839d9c7ad305fd6b6800a0670e88a8f145b8',
            \Viserio\Component\Filesystem\Cache\CachedFactory::class => 'get3464730cd3676acae28437187812d01a3646f342500221e3d7116a579e0ee46c',
            \Viserio\Component\Filesystem\FilesystemManager::class => 'getce0b0dbd6e729edd7783acc0f924ee1d4b793500c5b0d76b7ce9ed554f67fee3',
            'config' => 'get34bcaa5afa8745d92e6161e8495be3b939c5c6abb4dc2fd1f5a3cfdaba620256',
            'flysystem.connection' => 'get866619eacb502ee2d5cde2cab69447adf19214518aa12c87fd7032e07e6c2ef2',
        ];
        $this->aliases = [
            \League\Flysystem\Filesystem::class => \Viserio\Component\Filesystem\FilesystemManager::class,
            \League\Flysystem\FilesystemInterface::class => \Viserio\Component\Filesystem\FilesystemManager::class,
            \Psr\SimpleCache\CacheInterface::class => \Psr\Cache\CacheItemPoolInterface::class,
            \Viserio\Component\Cache\CacheManager::class => \Viserio\Contract\Cache\Manager::class,
            'cache' => \Viserio\Contract\Cache\Manager::class,
            'cache.store' => \Psr\Cache\CacheItemPoolInterface::class,
            'flysystem' => \Viserio\Component\Filesystem\FilesystemManager::class,
            'flysystem.cached.factory' => \Viserio\Component\Filesystem\Cache\CachedFactory::class,
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return require $this->containerDir . '/removed-ids.php';
    }

    /**
     * Returns the public Psr\Cache\CacheItemPoolInterface shared service.
     *
     * @return mixed An instance returned by \Viserio\Component\Container\Definition\ReferenceDefinition::getDriver()
     */
    protected function geta5b685927e5b9bb2231acfb11f144d6dad3923af3df18927d2541a017feb40a3()
    {
        return $this->services[\Psr\Cache\CacheItemPoolInterface::class] = ($this->services[\Viserio\Contract\Cache\Manager::class] ?? $this->get4edf51c380c969168368957bf52a839d9c7ad305fd6b6800a0670e88a8f145b8())->getDriver();
    }

    /**
     * Returns the public Viserio\Contract\Cache\Manager shared service.
     *
     * @return \Viserio\Component\Cache\CacheManager
     */
    protected function get4edf51c380c969168368957bf52a839d9c7ad305fd6b6800a0670e88a8f145b8(): \Viserio\Component\Cache\CacheManager
    {
        $this->services[\Viserio\Contract\Cache\Manager::class] = $instance = new \Viserio\Component\Cache\CacheManager([
            'viserio' => [
                'filesystem' => [
                    'default' => 'local',
                    'connections' => [
                        'local' => [
                            'path' => ($this->targetDirs[1] . '/test'),
                            'prefix' => 'your-prefix',
                        ],
                    ],
                ],
                'cache' => [
                    'default' => 'array',
                    'drivers' => [],
                    'namespace' => false,
                ],
            ],
        ]);

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Returns the public Viserio\Component\Filesystem\Cache\CachedFactory shared service.
     *
     * @return \Viserio\Component\Filesystem\Cache\CachedFactory
     */
    protected function get3464730cd3676acae28437187812d01a3646f342500221e3d7116a579e0ee46c(): \Viserio\Component\Filesystem\Cache\CachedFactory
    {
        return $this->services[\Viserio\Component\Filesystem\Cache\CachedFactory::class] = new \Viserio\Component\Filesystem\Cache\CachedFactory(($this->services[\Viserio\Component\Filesystem\FilesystemManager::class] ?? $this->getce0b0dbd6e729edd7783acc0f924ee1d4b793500c5b0d76b7ce9ed554f67fee3()), ($this->services[\Viserio\Contract\Cache\Manager::class] ?? $this->get4edf51c380c969168368957bf52a839d9c7ad305fd6b6800a0670e88a8f145b8()));
    }

    /**
     * Returns the public Viserio\Component\Filesystem\FilesystemManager shared service.
     *
     * @return \Viserio\Component\Filesystem\FilesystemManager
     */
    protected function getce0b0dbd6e729edd7783acc0f924ee1d4b793500c5b0d76b7ce9ed554f67fee3(): \Viserio\Component\Filesystem\FilesystemManager
    {
        $this->services[\Viserio\Component\Filesystem\FilesystemManager::class] = $instance = new \Viserio\Component\Filesystem\FilesystemManager([
            'viserio' => [
                'filesystem' => [
                    'default' => 'local',
                    'connections' => [
                        'local' => [
                            'path' => ($this->targetDirs[1] . '/test'),
                            'prefix' => 'your-prefix',
                        ],
                    ],
                ],
                'cache' => [
                    'default' => 'array',
                    'drivers' => [],
                    'namespace' => false,
                ],
            ],
        ]);

        if ($this->has(\Viserio\Contract\Cache\Manager::class)) {
            $instance->setCacheManager(($this->services[\Viserio\Contract\Cache\Manager::class] ?? $this->get4edf51c380c969168368957bf52a839d9c7ad305fd6b6800a0670e88a8f145b8()));
        }

        return $instance;
    }

    /**
     * Returns the public config service.
     *
     * @return array
     */
    protected function get34bcaa5afa8745d92e6161e8495be3b939c5c6abb4dc2fd1f5a3cfdaba620256(): array
    {
        return [
            'viserio' => [
                'filesystem' => [
                    'default' => 'local',
                    'connections' => [
                        'local' => [
                            'path' => ($this->targetDirs[1] . '/test'),
                            'prefix' => 'your-prefix',
                        ],
                    ],
                ],
                'cache' => [
                    'default' => 'array',
                    'drivers' => [],
                    'namespace' => false,
                ],
            ],
        ];
    }

    /**
     * Returns the public flysystem.connection shared service.
     *
     * @return mixed An instance returned by \Viserio\Component\Container\Definition\ReferenceDefinition::getConnection()
     */
    protected function get866619eacb502ee2d5cde2cab69447adf19214518aa12c87fd7032e07e6c2ef2()
    {
        return $this->services['flysystem.connection'] = ($this->services[\Viserio\Component\Filesystem\FilesystemManager::class] ?? $this->getce0b0dbd6e729edd7783acc0f924ee1d4b793500c5b0d76b7ce9ed554f67fee3())->getConnection();
    }
}
