<?php

declare(strict_types=1);

/**
 * This file is part of Narrowspark Framework.
 *
 * (c) Daniel Bannert <d.bannert@anolilab.de>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Viserio\Component\Routing\Tests\Container\Provider\Compiled;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class RoutingServiceProviderContainerTestGetUrlGeneratorProvider extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
     * Create a new Compiled Container instance.
     */
    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMapping = [
            \Viserio\Contract\Routing\Dispatcher::class => 'getdbf0d80bb72faf68b0e64ae28f321f2937bbd0a5641dc6e0e3c14d77ac90cebc',
            \Viserio\Contract\Routing\Router::class => 'get639eadb41acec5a4682e33d3d5a4fac1a0988b27ef4f45751735b2950eb42b56',
            'config' => 'get34bcaa5afa8745d92e6161e8495be3b939c5c6abb4dc2fd1f5a3cfdaba620256',
        ];
        $this->aliases = [
            \Viserio\Component\Routing\Router::class => \Viserio\Contract\Routing\Router::class,
            'route' => \Viserio\Contract\Routing\Router::class,
            'router' => \Viserio\Contract\Routing\Router::class,
        ];
        $this->syntheticIds = [
            \Psr\Http\Message\ServerRequestInterface::class => true,
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return [
            \Psr\Container\ContainerInterface::class => true,
            \Viserio\Contract\Container\Factory::class => true,
            \Viserio\Contract\Container\TaggedContainer::class => true,
            'container' => true,
        ];
    }

    /**
     * Returns the public Viserio\Contract\Routing\Dispatcher shared service.
     *
     * @return \Viserio\Component\Routing\Dispatcher\MiddlewareBasedDispatcher
     */
    protected function getdbf0d80bb72faf68b0e64ae28f321f2937bbd0a5641dc6e0e3c14d77ac90cebc(): \Viserio\Component\Routing\Dispatcher\MiddlewareBasedDispatcher
    {
        return $this->services[\Viserio\Contract\Routing\Dispatcher::class] = new \Viserio\Component\Routing\Dispatcher\MiddlewareBasedDispatcher();
    }

    /**
     * Returns the public Viserio\Contract\Routing\Router shared service.
     *
     * @return \Viserio\Component\Routing\Router
     */
    protected function get639eadb41acec5a4682e33d3d5a4fac1a0988b27ef4f45751735b2950eb42b56(): \Viserio\Component\Routing\Router
    {
        $this->services[\Viserio\Contract\Routing\Router::class] = $instance = new \Viserio\Component\Routing\Router(($this->services[\Viserio\Contract\Routing\Dispatcher::class] ?? $this->getdbf0d80bb72faf68b0e64ae28f321f2937bbd0a5641dc6e0e3c14d77ac90cebc()));

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Returns the public config service.
     *
     * @return array
     */
    protected function get34bcaa5afa8745d92e6161e8495be3b939c5c6abb4dc2fd1f5a3cfdaba620256(): array
    {
        return [
            'viserio' => [
                'routing' => [
                    'path' => '',
                ],
            ],
        ];
    }
}
