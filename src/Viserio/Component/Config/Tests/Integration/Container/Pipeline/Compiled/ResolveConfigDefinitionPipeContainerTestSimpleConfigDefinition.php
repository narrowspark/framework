<?php

declare(strict_types=1);

/**
 * This file is part of Narrowspark Framework.
 *
 * (c) Daniel Bannert <d.bannert@anolilab.de>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace Viserio\Component\Config\Tests\Integration\Container\Pipeline\Integration\Compiled;

use stdClass;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class ResolveConfigDefinitionPipeContainerTestSimpleConfigDefinition extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
     * Create a new Compiled Container instance.
     */
    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->parameters = [
            'doctrine' => [
                'connection' => [],
            ],
        ];
        $this->methodMapping = [
            'foo' => 'get55df4251026261c15e5362b72748729c5413605491a6b31caf07b0571c04af5f',
        ];
    }

    /**
     * Returns the public foo shared service.
     *
     * @return stdClass
     */
    protected function get55df4251026261c15e5362b72748729c5413605491a6b31caf07b0571c04af5f(): stdClass
    {
        return $this->services['foo'] = new stdClass(new \Viserio\Component\Config\Container\Pipeline\ConfigBag([
            'params' => [
                'host' => 'awesomehost',
                'port' => '4444',
            ],
        ], $this->getParameter('doctrine.connection')));
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return [
            \Psr\Container\ContainerInterface::class => true,
            \Viserio\Component\Config\Command\ConfigDumpCommand::class => true,
            \Viserio\Component\Config\Command\ConfigReaderCommand::class => true,
            \Viserio\Contract\Container\CompiledContainer::class => true,
            \Viserio\Contract\Container\Factory::class => true,
            \Viserio\Contract\Container\TaggedContainer::class => true,
            'container' => true,
        ];
    }
}
