<?php
declare(strict_types=1);
namespace Viserio\Component\Container\Compiler;

use Viserio\Component\Contract\Container\Exception\InvalidArgumentException;

final class Compiler
{
    /**
     * Name of the container class, used to create the container.
     *
     * @var string
     */
    private $containerClass = 'CompiledContainer';

    /**
     * Name of the container parent class, used on compiled container.
     *
     * @var string
     */
    private $containerParentClass = CompiledContainer::class;

    /**
     * If true, write the proxies to disk to improve performances.
     *
     * @var bool
     */
    private $writeProxiesToFile = false;

    /**
     * Directory where to write the proxies (if $writeProxiesToFile is enabled).
     *
     * @var null|string
     */
    private $proxyDirectory;

    /**
     * Whether the container has already been built.
     *
     * @var bool
     */
    private $locked = false;

    /**
     * Configure the proxy generation.
     *
     * For dev environment, use `writeProxiesToFile(false)` (default configuration)
     * For production environment, use `writeProxiesToFile(true, 'tmp/proxies')`
     *
     * @see http://php-di.org/doc/lazy-injection.html
     *
     * @param bool        $writeToFile    If true, write the proxies to disk to improve performances
     * @param null|string $proxyDirectory Directory where to write the proxies
     *
     * @throws InvalidArgumentException when writeToFile is set to true and the proxy directory is null
     *
     * @return void
     */
    public function writeProxiesToFile(bool $writeToFile, string $proxyDirectory = null): void
    {
        $this->ensureNotLocked();

        $this->writeProxiesToFile = $writeToFile;

        if ($writeToFile && $proxyDirectory === null) {
            throw new InvalidArgumentException(
                'The proxy directory must be specified if you want to write proxies on disk'
            );
        }

        $this->proxyDirectory = $proxyDirectory;
    }

    /**
     * Compile the container.
     *
     * @param string $directory
     * @param array  $options
     *
     * @return string the compiled container file name
     */
    public function compile(string $directory, array $options = []): string
    {
        $options = \array_merge([
            'base_class' => $this->containerParentClass,
            'build_time' => \time(),
            'class'      => $this->containerClass,
            'namespace'  => 'Viserio\Component\Container',
        ], $options);

        $fileName = \rtrim($directory, '/') . '/' . $options['class'] . '.php';

        // The container is already compiled
        if (\file_exists($fileName)) {
            return $fileName;
        }

        // Validate that a valid class name was provided
        if (! \preg_match('/^[a-zA-Z_][a-zA-Z0-9_]*$/', $options['class'])) {
            throw new InvalidArgumentException(\sprintf('The container cannot be compiled: [%s] is not a valid PHP class name', $options['class']));
        }

        $methods = [];

        $fileContent = '<?php' . PHP_EOL . 'declare(strict_types=1);' . PHP_EOL . PHP_EOL . '/**' . PHP_EOL . ' * This class has been auto-generated by Viserio Container.' . PHP_EOL . ' */';
        $fileContent .= 'class ' . $options['class'] . ' extends ' . $options['base_class'] . PHP_EOL . '{';
        $fileContent .= 'protected static $methodMapping = [' . '];' . PHP_EOL . PHP_EOL;

        foreach ($methods as $methodName => $methodContent) {
            $fileContent .= 'protected function ' . $methodName . '()' . PHP_EOL . '    {' . PHP_EOL . $methodContent . PHP_EOL . '}' . PHP_EOL . PHP_EOL;
        }

        $fileContent .= '}';

        $this->createCompilationDirectory(dirname($fileName));

        $successful = @\file_put_contents($fileName, $fileContent);

        if (! $successful) {
            throw new \RuntimeException('');
        }

        return $fileName;
    }

    /**
     * @param string $directory
     *
     * @return void
     */
    private function createCompilationDirectory(string $directory): void
    {
        if (! \is_dir($directory) && ! @\mkdir($directory, 0777, true)) {
            throw new InvalidArgumentException(\sprintf('Compilation directory does not exist and cannot be created: %s.', $directory));
        }

        if (! \is_writable($directory)) {
            throw new InvalidArgumentException(\sprintf('Compilation directory is not writable: %s.', $directory));
        }
    }

    /**
     * @throws \LogicException
     */
    private function ensureNotLocked(): void
    {
        if ($this->locked) {
            throw new \LogicException('The Compiler cannot be modified after the container has been built');
        }
    }
}
