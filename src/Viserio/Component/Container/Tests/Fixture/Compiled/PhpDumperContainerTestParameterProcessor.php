<?php

declare(strict_types=1);

namespace Viserio\Component\Container\Tests\IntegrationTest\Dumper\Compiled;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class PhpDumperContainerTestParameterProcessor extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
    * The stack of concretions currently being built.
    *
     * @var array<string, bool>
     */
    private $resolvingDynamicParameters = [];

    /**
     * Create a new Compiled Container instance.
     */
    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->parameters = [
            'container.parameter.provided.processor.types' => [
                'foo' => true,
                'base64' => true,
                'base64_decode' => true,
                'csv' => true,
                'str_getcsv' => true,
                'file' => true,
                'json' => true,
                'json_decode' => true,
                'url' => true,
                'query_string' => true,
                'trim' => true,
                'require' => true,
            ],
        ];
        $this->loadedDynamicParameters = [
            'foo' => false,
            'baz' => false,
        ];
        $this->methodMapping = [
            'container.parameter.processors' => 'get86047e9365daae20dafc971762ab81fee5d3d066aaa510eba312ea659095239b',
        ];
    }

    /**
     * Returns the public container.parameter.processors shared service.
     *
     * @return \Viserio\Component\Container\RewindableGenerator
     */
    protected function get86047e9365daae20dafc971762ab81fee5d3d066aaa510eba312ea659095239b(): \Viserio\Component\Container\RewindableGenerator
    {
        return $this->services['container.parameter.processors'] = new \Viserio\Component\Container\RewindableGenerator(static function () {
            yield 0 => new \Viserio\Component\Container\Tests\Fixture\Processor\FooParameterProcessor();
            yield 1 => new \Viserio\Component\Container\Processor\FunctionalParameterProcessor();
        }, 2);
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return [
            \Psr\Container\ContainerInterface::class => true,
            \Viserio\Component\Container\Processor\FunctionalParameterProcessor::class => true,
            \Viserio\Component\Container\Tests\Fixture\Processor\FooParameterProcessor::class => true,
            \Viserio\Contract\Container\Factory::class => true,
            \Viserio\Contract\Container\TaggedContainer::class => true,
            'container' => true,
        ];
    }

    /**
     * {@inheritdoc}
     */
    protected function doGetParameter( string$id)
    {
        $process = function($value) {
            if (is_array($value)) {
                \array_walk_recursive($data, function (&$parameter): void {
                    $parameter = $this->processParameter($parameter);
                });

                return $value;
            }

            return $this->processParameter($value);
        };

        switch ($id) {
            case 'foo': $value = $process('{foo:baz}'); break;
            case 'baz': $value = $process('{json_decode:base64_decode:W10=}'); break;

            default: return parent::doGetParameter($id);
        }

        $this->loadedDynamicParameters[$id] = true;

        return $this->dynamicParameters[$id] = $value;
    }

    /**
     * Process through value.
     *
     * @param int|string|float|bool $value
     *
     * @return int|string|float|bool
     */
    private function processParameter($value)
    {
        if (\is_string($value)) {
            $data = \explode(':', \trim($value, '{}'));
            $lastKey = array_key_last($data);
            $initial = $data[$lastKey];

            unset($data[$lastKey]);

            return \array_reduce(\array_reverse($data), function (string $carry, string $method) {
                $value = "{{$method}:{$carry}}";

                /** @var \Viserio\Contract\Container\Processor\ParameterProcessor $processor */
                foreach ($this->get('container.parameter.processors') as $processor) {
                    if ($processor->supports($value)) {
                        return $processor->process($value);
                    }
                }
            }, $initial);
        }

        return $value;
    }
}
