<?php

declare(strict_types=1);

namespace Viserio\Component\Container\Tests\IntegrationTest\Dumper\Compiled;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class PhpDumperContainerTestCircularDynamicParameter extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
    * The stack of concretions currently being built.
    *
     * @var array<string, bool>
     */
    private array $resolvingDynamicParameters = [];

    /**
     * Create a new Compiled Container instance.
     */
    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->parameters = [
            'viserio.container.parameter.provided.processor.types' => [
                'resolve' => [
                    0 => 'string',
                ],
                'env' => [
                    0 => 'string',
                ],
            ],
        ];
        $this->loadedDynamicParameters = [
            'foo' => false,
            'bar' => false,
        ];
        $this->dynamicParameterMapper = [];
        $this->methodMapping = [
            \Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor::class => 'get1d523bac31a99b4250aae4e9e46f0e2b4d3583b86d60156f5765cc860b7537e7',
            'viserio.container.parameter.processors' => 'get028fc92a67b9740ad1c068d114dbd0d7447ac561074ed6672764becf68ac8a40',
        ];
    }

    /**
     * {@inheritDoc}
     */
    public function getParameters(): array
    {
        return \array_merge(parent::getParameters(), $this->dynamicParameterMapper);
    }

    /**
     * Returns the public Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor shared service.
     *
     * @return \Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor
     */
    protected function get1d523bac31a99b4250aae4e9e46f0e2b4d3583b86d60156f5765cc860b7537e7(): \Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor
    {
        return $this->services[\Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor::class] = new \Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor($this);
    }

    /**
     * Returns the public viserio.container.parameter.processors shared service.
     *
     * @return \Viserio\Component\Container\RewindableGenerator
     */
    protected function get028fc92a67b9740ad1c068d114dbd0d7447ac561074ed6672764becf68ac8a40(): \Viserio\Component\Container\RewindableGenerator
    {
        return $this->services['viserio.container.parameter.processors'] = new \Viserio\Component\Container\RewindableGenerator(function () {
            yield 0 => ($this->services[\Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor::class] ?? $this->get1d523bac31a99b4250aae4e9e46f0e2b4d3583b86d60156f5765cc860b7537e7());
            yield 1 => new \Viserio\Component\Container\Tests\Fixture\Processor\EnvParameterProcessor();
        }, 2);
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return [
            \Psr\Container\ContainerInterface::class => true,
            \Viserio\Component\Container\Tests\Fixture\Processor\EnvParameterProcessor::class => true,
            \Viserio\Contract\Container\CompiledContainer::class => true,
            \Viserio\Contract\Container\Factory::class => true,
            \Viserio\Contract\Container\TaggedContainer::class => true,
            'container' => true,
        ];
    }

    /**
     * {@inheritdoc}
     */
    protected function doGetParameter(string $id)
    {
        $processors = $this->get('viserio.container.parameter.processors');

        switch ($id) {
            case 'foo': $value = $this->processParameter('{DUMMY_ENV_VAR|env|resolve}', $processors); break;
            case 'bar': $value = $this->processParameter('{DUMMY_ENV_VAR|env|resolve}', $processors); break;

            default: return parent::doGetParameter($id);
        }

        $this->loadedDynamicParameters[$id] = true;

        return $this->dynamicParameters[$id] = \is_array($value) ? \array_merge_recursive($value, $this->dynamicParameterMapper[$id] ?? []) : $value;
    }

    /**
     * Process through value.
     *
     * @param int|string|float|bool $parameter
     * @param iterable              $processors
     *
     * @return int|string|float|bool
     */
    private function processParameter($parameter, iterable $processors)
    {
        if (\preg_match('/(.*)?\{(.+)\|(.*)\}/U', $parameter, $matches) === 0) {
            return $parameter;
        }

        $parameter = \array_reduce(\explode('|', $matches[3]), function ($carry, string $method) use ($parameter, $processors) {
            if ($carry === null) {
                return null;
            }

            $value = "{$carry}|{$method}";

            if (\array_key_exists($value, $this->resolvingDynamicParameters)) {
                throw new \Viserio\Contract\Container\Exception\CircularParameterException($parameter, \array_keys($this->resolvingDynamicParameters));
            }

            /** @var \Viserio\Contract\Container\Processor\ParameterProcessor $processor */
            foreach ($processors as $processor) {
                if ($processor->supports($value)) {
                    $this->resolvingDynamicParameters[$value] = true;

                    return $processor->process($value);
                }
            }
        }, $matches[2]);

        if (isset($matches[1]) && $matches[1] !== '') {
            $parameter = $matches[1].$parameter;
        }

        $this->resolvingDynamicParameters = [];

        return $parameter;
    }
}
