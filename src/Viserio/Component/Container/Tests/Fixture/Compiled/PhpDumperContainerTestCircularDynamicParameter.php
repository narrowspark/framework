<?php

declare(strict_types=1);

namespace Viserio\Component\Container\Tests\Integration\Dumper\Compiled;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class PhpDumperContainerTestCircularDynamicParameter extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
    * The stack of concretions currently being built.
    *
     * @var array<string, bool>
     */
    private array $resolvingDynamicParameters = [];

    /**
     * Create a new Compiled Container instance.
     */
    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->parameters = [
            'viserio.container.runtime.parameter.processor.types' => [
                'resolve' => [
                    0 => 'string',
                ],
                'env' => [
                    0 => 'bool',
                    1 => 'int',
                    2 => 'float',
                    3 => 'string',
                    4 => 'array',
                ],
            ],
        ];
        $this->loadedDynamicParameters = [
            'foo' => false,
            'bar' => false,
        ];
        $this->dynamicParameterMapper = [];
        $this->methodMapping = [
            'viserio.container.runtime.parameter.processors' => 'gete72852784fbbbd62bbac5a8aec7e44d0acb18db0dd6a35a841780313b22837ff',
        ];
    }

    /**
     * {@inheritDoc}
     */
    public function getParameters(): array
    {
        return \array_merge(parent::getParameters(), $this->dynamicParameterMapper);
    }

    /**
     * Returns the public viserio.container.runtime.parameter.processors shared service.
     *
     * @return \Viserio\Component\Container\RewindableGenerator
     */
    protected function gete72852784fbbbd62bbac5a8aec7e44d0acb18db0dd6a35a841780313b22837ff(): \Viserio\Component\Container\RewindableGenerator
    {
        return $this->services['viserio.container.runtime.parameter.processors'] = new \Viserio\Component\Container\RewindableGenerator(function () {
            yield 0 => ($this->privates[\Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor::class] ?? $this->get97a5042e82056c180e9f609f9d22f762107415e7f5a54aee4d300d58837d927a());
            yield 1 => ($this->privates[\Viserio\Component\Container\Processor\EnvParameterProcessor::class] ?? $this->getf2b69a4533503376ddade957f0f4242967826e7f25fb7a36e11e0b3441e0735b());
        }, 2);
    }

    /**
     * Returns the private Viserio\Component\Container\Processor\EnvParameterProcessor shared service.
     *
     * @return \Viserio\Component\Container\Processor\EnvParameterProcessor
     */
    protected function getf2b69a4533503376ddade957f0f4242967826e7f25fb7a36e11e0b3441e0735b(): \Viserio\Component\Container\Processor\EnvParameterProcessor
    {
        return $this->privates[\Viserio\Component\Container\Processor\EnvParameterProcessor::class] = new \Viserio\Component\Container\Processor\EnvParameterProcessor();
    }

    /**
     * Returns the private Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor shared service.
     *
     * @return \Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor
     */
    protected function get97a5042e82056c180e9f609f9d22f762107415e7f5a54aee4d300d58837d927a(): \Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor
    {
        return $this->privates[\Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor::class] = new \Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor($this);
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return [
            \Psr\Container\ContainerInterface::class => true,
            \Viserio\Component\Container\Processor\EnvParameterProcessor::class => true,
            \Viserio\Component\Container\Processor\ResolveRuntimeParameterProcessor::class => true,
            \Viserio\Contract\Container\CompiledContainer::class => true,
            \Viserio\Contract\Container\Factory::class => true,
            \Viserio\Contract\Container\TaggedContainer::class => true,
            'container' => true,
        ];
    }

    /**
     * {@inheritdoc}
     */
    protected function doGetParameter(string $id)
    {
        switch ($id) {
            case 'foo': $value = $this->processParameter('{DUMMY_ENV_VAR|env|resolve}'); break;
            case 'bar': $value = $this->processParameter('{DUMMY_ENV_VAR|env|resolve}'); break;

            default: return parent::doGetParameter($id);
        }

        $this->loadedDynamicParameters[$id] = true;

        return $this->dynamicParameters[$id] = \is_array($value) ? \array_merge_recursive($value, $this->dynamicParameterMapper[$id] ?? []) : $value;
    }

    /**
     * Process through value.
     *
     * @param string $expression
     *
     * @return int|string|float|bool
     */
    private function processParameter($expression)
    {
        if (\preg_match('/\{(.+)\|(.*)\}/U', $expression, $matches) === 0) {
            return $expression;
        }

        $value = \array_reduce(\explode('|', $matches[2]), function ($carry, string $method) use ($expression) {
            if ($carry === null) {
                return null;
            }

            $value = "{$carry}|{$method}";

            if (\array_key_exists($value, $this->resolvingDynamicParameters)) {
                throw new \Viserio\Contract\Container\Exception\CircularParameterException($expression, \array_keys($this->resolvingDynamicParameters));
            }

            /** @var \Viserio\Contract\Container\Processor\ParameterProcessor $processor */
            foreach ($this->get('viserio.container.runtime.parameter.processors') as $processor) {
                if ($processor->supports($value)) {
                    $this->resolvingDynamicParameters[$value] = true;

                    return $processor->process($value);
                }
            }
        }, $matches[1]);


        $this->resolvingDynamicParameters = [];

        if (\is_string($value)) {
            return \str_replace($matches[0], $value, $expression);
        }

        return $value;
    }
}
