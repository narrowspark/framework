<?php

declare(strict_types=1);

namespace Viserio\Component\Container\Tests\Integration\Dumper\Compiled;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class PhpDumperContainerTestContainerCanBeDumpedWithComplexClosure extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
     * Create a new Compiled Container instance.
     */
    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMapping = [
            'closure' => 'get79a31409d3ebbb30a5b616082b33e23c1919700cba4aafa93a8f4f5cc93588d1',
        ];
    }

    /**
     * Returns the public closure service.
     *
     * @return mixed Returned by a function
     */
    protected function get79a31409d3ebbb30a5b616082b33e23c1919700cba4aafa93a8f4f5cc93588d1()
    {
        return static function () {
    $instance = new \stdClass();
    $instance->foo = 'test';
    $instance->{'only dot'} = '.';
    $instance->{'concatenation as value'} = '.\'\'.';
    $instance->{'concatenation from the start value'} = '\'\'.';
    $instance->{'.'} = 'dot as a key';
    $instance->{'.\'\'.'} = 'concatenation as a key';
    $instance->{'\'\'.'} = 'concatenation from the start key';
    $instance->{'optimize concatenation'} = 'string1-string2';
    $instance->{'optimize concatenation with empty string'} = 'string1string2';
    $instance->{'optimize concatenation from the start'} = 'start';
    $instance->{'optimize concatenation at the end'} = 'end';
    $instance->{'new line'} = "string with \n" . 'new line';
    $instance->self = \Viserio\Component\Container\Tests\Integration\Dumper\PhpDumperTest::TEST;
    return $instance;
};
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return [
            \Psr\Container\ContainerInterface::class => true,
            \Viserio\Contract\Container\CompiledContainer::class => true,
            \Viserio\Contract\Container\Factory::class => true,
            \Viserio\Contract\Container\TaggedContainer::class => true,
            'container' => true,
        ];
    }
}
