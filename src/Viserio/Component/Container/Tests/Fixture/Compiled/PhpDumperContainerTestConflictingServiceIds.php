<?php

declare(strict_types=1);

namespace Viserio\Component\Container\Tests\Integration\Dumper\Compiled;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class PhpDumperContainerTestConflictingServiceIds extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
     * Create a new Compiled Container instance.
     */
    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMapping = [
            'foo_bar' => 'get7289489f154b307caaa9ee39fe16fd0bf67124c6bb9e318c3c8c564dc56b0bf8',
            'foobar' => 'getdb3c1fd650bb16a157f6a2eeedf61e9c9bb749b772fb9d7e3290190e5b3029fd',
        ];
    }

    /**
     * Returns the public foo_bar shared service.
     *
     * @return \stdClass
     */
    protected function get7289489f154b307caaa9ee39fe16fd0bf67124c6bb9e318c3c8c564dc56b0bf8(): \stdClass
    {
        return $this->services['foo_bar'] = new \stdClass();
    }

    /**
     * Returns the public foobar shared service.
     *
     * @return \stdClass
     */
    protected function getdb3c1fd650bb16a157f6a2eeedf61e9c9bb749b772fb9d7e3290190e5b3029fd(): \stdClass
    {
        return $this->services['foobar'] = new \stdClass();
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return [
            \Psr\Container\ContainerInterface::class => true,
            \Viserio\Contract\Container\CompiledContainer::class => true,
            \Viserio\Contract\Container\Factory::class => true,
            \Viserio\Contract\Container\TaggedContainer::class => true,
            'container' => true,
        ];
    }
}
