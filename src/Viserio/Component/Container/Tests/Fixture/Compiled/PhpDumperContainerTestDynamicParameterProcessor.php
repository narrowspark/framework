<?php

declare(strict_types=1);

namespace Viserio\Component\Container\Tests\IntegrationTest\Dumper\Compiled;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class PhpDumperContainerTestDynamicParameterProcessor extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
    * The stack of concretions currently being built.
    *
     * @var array<string, bool>
     */
    private $resolvingDynamicParameters = [];

    /**
     * Create a new Compiled Container instance.
     */
    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->parameters = [
            'bar' => 'Bar',
            'container.parameter.provided.processor.types' => [
                'foo' => [
                    0 => 'string',
                ],
                'resolve' => [
                    0 => 'string',
                ],
                'base64' => [
                    0 => 'string',
                ],
                'base64_decode' => [
                    0 => 'string',
                ],
                'csv' => [
                    0 => 'array',
                ],
                'str_getcsv' => [
                    0 => 'array',
                ],
                'file' => [
                    0 => 'string',
                ],
                'json' => [
                    0 => 'array',
                ],
                'json_decode' => [
                    0 => 'array',
                ],
                'url' => [
                    0 => 'array',
                ],
                'query_string' => [
                    0 => 'array',
                ],
                'trim' => [
                    0 => 'string',
                ],
                'require' => [
                    0 => 'bool',
                    1 => 'int',
                    2 => 'float',
                    3 => 'string',
                    4 => 'array',
                ],
                'env' => [
                    0 => 'string',
                ],
            ],
        ];
        $this->loadedDynamicParameters = [
            'foo' => false,
            'baz' => false,
            'foo2' => false,
            'json' => false,
        ];
        $this->methodMapping = [
            \Viserio\Component\Container\Processor\ResolveParameterProcessor::class => 'get1d523bac31a99b4250aae4e9e46f0e2b4d3583b86d60156f5765cc860b7537e7',
            'container.parameter.processors' => 'get86047e9365daae20dafc971762ab81fee5d3d066aaa510eba312ea659095239b',
        ];
    }

    /**
     * Returns the public Viserio\Component\Container\Processor\ResolveParameterProcessor shared service.
     *
     * @return \Viserio\Component\Container\Processor\ResolveParameterProcessor
     */
    protected function get1d523bac31a99b4250aae4e9e46f0e2b4d3583b86d60156f5765cc860b7537e7(): \Viserio\Component\Container\Processor\ResolveParameterProcessor
    {
        $this->services[\Viserio\Component\Container\Processor\ResolveParameterProcessor::class] = $instance = new \Viserio\Component\Container\Processor\ResolveParameterProcessor();

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Returns the public container.parameter.processors shared service.
     *
     * @return \Viserio\Component\Container\RewindableGenerator
     */
    protected function get86047e9365daae20dafc971762ab81fee5d3d066aaa510eba312ea659095239b(): \Viserio\Component\Container\RewindableGenerator
    {
        return $this->services['container.parameter.processors'] = new \Viserio\Component\Container\RewindableGenerator(function () {
            yield 0 => new \Viserio\Component\Container\Tests\Fixture\Processor\FooParameterProcessor();
            yield 1 => ($this->services[\Viserio\Component\Container\Processor\ResolveParameterProcessor::class] ?? $this->get1d523bac31a99b4250aae4e9e46f0e2b4d3583b86d60156f5765cc860b7537e7());
            yield 2 => new \Viserio\Component\Container\Processor\BaseParameterProcessor();
            yield 3 => new \Viserio\Component\Container\Tests\Fixture\Processor\EnvParameterProcessor();
        }, 4);
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return [
            \Psr\Container\ContainerInterface::class => true,
            \Viserio\Component\Container\Processor\BaseParameterProcessor::class => true,
            \Viserio\Component\Container\Tests\Fixture\Processor\EnvParameterProcessor::class => true,
            \Viserio\Component\Container\Tests\Fixture\Processor\FooParameterProcessor::class => true,
            \Viserio\Contract\Container\Factory::class => true,
            \Viserio\Contract\Container\TaggedContainer::class => true,
            'container' => true,
        ];
    }

    /**
     * {@inheritdoc}
     */
    protected function doGetParameter(string $id)
    {
        $process = function($value) {
            if (is_array($value)) {
                \array_walk_recursive($data, function (&$parameter): void {
                    $parameter = $this->processParameter($parameter);
                });

                return $value;
            }

            return $this->processParameter($value);
        };

        switch ($id) {
            case 'foo': $value = $process('Foo{DUMMY_BAR|env|resolve}'); break;
            case 'baz': $value = $process('{DUMMY_FOO|env|resolve}'); break;
            case 'foo2': $value = $process('{baz|foo}'); break;
            case 'json': $value = $process('{W10=|base64_decode|json_decode}'); break;

            default: return parent::doGetParameter($id);
        }

        $this->loadedDynamicParameters[$id] = true;

        return $this->dynamicParameters[$id] = $value;
    }

    /**
     * Process through value.
     *
     * @param int|string|float|bool $parameter
     *
     * @return int|string|float|bool
     */
    private function processParameter($parameter)
    {
        if (\is_string($parameter)) {
            \preg_match('/(.*)?\{(.+)\|(.*)\}/U', $parameter, $matches);

            $parameter = \array_reduce(\explode('|', $matches[3]), function ($carry, string $method) use ($parameter) {
                if ($carry === null) {
                    return;
                }

                $value = "{$carry}|{$method}";

                if (\array_key_exists($value, $this->resolvingDynamicParameters)) {
                    throw new \Viserio\Contract\Container\Exception\CircularParameterException($parameter, \array_keys($this->resolvingDynamicParameters));
                }

                /** @var \Viserio\Contract\Container\Processor\ParameterProcessor $processor */
                foreach ($this->get('container.parameter.processors') as $processor) {
                    if ($processor->supports("{{$value}}")) {
                        $this->resolvingDynamicParameters[$value] = true;

                        return $processor->process($value);
                    }
                }
            }, $matches[2]);

            if (isset($matches[1]) && $matches[1] !== '') {
                $parameter = $matches[1].$parameter;
            }

            $this->resolvingDynamicParameters = [];
        }

        return $parameter;
    }
}
