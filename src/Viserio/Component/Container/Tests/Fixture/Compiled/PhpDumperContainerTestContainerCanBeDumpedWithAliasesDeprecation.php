<?php

declare(strict_types=1);

namespace Viserio\Component\Container\Tests\Integration\Dumper\Compiled;

/**
 * This class has been auto-generated by Viserio Container Component.
 */
final class PhpDumperContainerTestContainerCanBeDumpedWithAliasesDeprecation extends \Viserio\Component\Container\AbstractCompiledContainer
{
    /**
     * Create a new Compiled Container instance.
     */
    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMapping = [
            'foo' => 'get55df4251026261c15e5362b72748729c5413605491a6b31caf07b0571c04af5f',
            'alias_for_foo_deprecated' => 'get32d6bb28486883f47cd1bd4176a63c0f7c4121b343b9f821bbadc6fdcf5ce455',
        ];
        $this->aliases = [
            'alias_for_foo_non_deprecated' => 'foo',
        ];
    }

    /**
     * Returns the public foo service.
     *
     * @return \stdClass
     */
    protected function get55df4251026261c15e5362b72748729c5413605491a6b31caf07b0571c04af5f(): \stdClass
    {
        return new \stdClass();
    }

    /**
     * Gets the public "alias_for_foo_deprecated" alias.
     *
     * @return mixed The "foo" service.
     */
    protected function get32d6bb28486883f47cd1bd4176a63c0f7c4121b343b9f821bbadc6fdcf5ce455()
    {
        @\trigger_error('The [alias_for_foo_deprecated] service alias is deprecated. You should stop using it, as it will be removed in the future.', \E_USER_DEPRECATED);

        return $this->get('foo');
    }

    /**
     * {@inheritdoc}
     */
    public function getRemovedIds(): array
    {
        return [
            \Psr\Container\ContainerInterface::class => true,
            \Viserio\Contract\Container\CompiledContainer::class => true,
            \Viserio\Contract\Container\Factory::class => true,
            \Viserio\Contract\Container\TaggedContainer::class => true,
            'container' => true,
        ];
    }
}
